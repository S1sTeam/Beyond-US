plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '6.0.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
}

version = "${mod_version}"
group = "${mod_group_id}"

base {
    archivesName = "${mod_id}"
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
    withSourcesJar()
}

println """
Java: ${System.getProperty 'java.version'}
JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'})
Arch: ${System.getProperty 'os.arch'}
"""

minecraft {
    mappings channel: "${mapping_channel}", version: "${mapping_version}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    
    copyIdeResources = true
    enableEclipsePrepareRuns = true
    
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES,SCAN'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', "${mod_id}"
            args '--username', 'Dev'
            
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES,SCAN'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', "${mod_id}"
            
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES,SCAN'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', "${mod_id}"
            
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES,SCAN'
            property 'forge.logging.console.level', 'debug'
            args '--mod', "${mod_id}", '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets {
    main {
        resources {
            srcDirs += 'src/generated/resources'
            exclude '.cache'
        }
    }
}

repositories {
    maven {
        url 'https://maven.minecraftforge.net'
    }
    maven {
        url 'https://maven.parchmentmc.org'
    }
    maven {
        url 'https://jitpack.io'
    }
    mavenLocal()
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    
    // Примеры популярных зависимостей
    implementation fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    
    // Mixin (если используется)
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    
    // Тестирование
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    
    inputs.properties([
        "minecraft_version": minecraft_version,
        "forge_version": forge_version,
        "mod_id": mod_id,
        "mod_name": mod_name,
        "mod_version": mod_version,
        "mod_authors": mod_authors,
        "mod_description": mod_description
    ])
    
    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand inputs.properties
    }
}

jar {
    manifest {
        attributes([
            "Specification-Title": mod_id,
            "Specification-Vendor": mod_authors,
            "Specification-Version": "1",
            "Implementation-Title": mod_name,
            "Implementation-Version": mod_version,
            "Implementation-Vendor": mod_authors,
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs": "${mod_id}.mixins.json"
        ])
    }
    
    finalizedBy 'reobfJar'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
    options.release = 17
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = mod_id
            artifact jar
            artifact sourcesJar
            
            pom {
                name = mod_name
                description = mod_description
                url = 'https://example.com'
                
                licenses {
                    license {
                        name = mod_license
                    }
                }
                
                developers {
                    developer {
                        id = mod_authors.split(',')[0].trim()
                        name = mod_authors
                    }
                }
            }
        }
    }
    
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}.mixins.json"
}
