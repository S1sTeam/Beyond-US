plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '6.0.+' // Стабильная версия для 1.20.1
    id 'org.parchmentmc.librarian.forgegradle' version '1.+' // Для Parchment mappings (опционально)
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

// Настройки Java (Forge 1.20.1 требует Java 17)
java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    withSourcesJar()
}

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

minecraft {
    // Выберите один из вариантов маппингов:
    
    // Вариант 1: Официальные маппинги Mojang
    mappings channel: 'official', version: '1.20.1'
    
    // Вариант 2: Parchment маппинги (с параметрами имен)
    // mappings channel: 'parchment', version: '2023.09.03-1.20.1'
    
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', mod_id
            mods { "${mod_id}" { source sourceSets.main } }
        }
        
        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', mod_id
            mods { "${mod_id}" { source sourceSets.main } }
        }
        
        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods { "${mod_id}" { source sourceSets.main } }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url 'https://maven.minecraftforge.net' }
    maven { url 'https://maven.parchmentmc.org' } // Для Parchment
    mavenLocal()
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    
    // Пример добавления других зависимостей:
    // implementation fg.deobf("curse.maven:jei-238222:${jei_version}")
    // runtimeOnly fg.deobf("curse.maven:configured-457570:${configured_version}")
}

processResources {
    inputs.properties([
        "minecraft_version": minecraft_version,
        "forge_version": forge_version,
        "mod_id": mod_id,
        "mod_name": mod_name,
        "mod_version": mod_version,
        "mod_authors": mod_authors,
        "mod_description": mod_description
    ])
    
    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand inputs.properties
    }
}

jar {
    manifest {
        attributes([
            "Specification-Title": mod_id,
            "Specification-Vendor": mod_authors,
            "Specification-Version": "1",
            "Implementation-Title": mod_name,
            "Implementation-Version": mod_version,
            "Implementation-Vendor": mod_authors,
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    
    finalizedBy 'reobfJar'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact sourcesJar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}
